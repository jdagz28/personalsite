[{"content":"This repository is a clone of dockersamples/example-voting-app, created for learning and experimenting with Docker containers. It serves as a practical hands-on project to understand containerization.\nArchitecture # Diagram from the original repository.\nFront-end web app (Python): Allows users to vote between a dog or cat. Redis: Acts as a queue to collect new votes. Worker app (.NET): Consumes votes from the Redis queue and stores them in a database. Postgres: A database that stores the voting results. Results web app (Node.js): Displays the voting results in real-time. Learning Objectives #This repository is a simplified version of the original project, with the main goals of:\nLearning Docker basics and commands. Building Docker images and running images available on Docker Hub. Setting up containers with port mapping. Linking containers. Manually application setup. Automating the application setup with Docker Compose. Docker Basics #Containers # Containers are lightweight, standalone, and executable packages that include everything needed to run a piece of software, including the code, runtime, system tools, libraries, and settings. They are instances of Docker images that are isolated and have their own environments and set of processes. Unlike virtual machines, containers share the host system\u0026rsquo;s kernel and resources, making them more efficient and faster to start. Containers are designed to run specific tasks or processes, rather than an entire operating system like virtual machines. Docker Images # Docker images are read-only templates used to create containers. They include the application code, libraries, dependencies, and other files necessary for the application to run. An image can be thought of as a snapshot of a container\u0026rsquo;s file system at a specific point in time. Images can be built from a set of instructions written in a Dockerfile, which specifies the base image, application code, and other dependencies. Docker images are stored in repositories, such as Docker Hub, from where they can be pulled to create new containers. Some Useful Commands to Remember #docker run [image] # If the image is not available locally, it will download the image in the first run docker ps # List the running containers docker ps -a # List all running and previously stopped containers docker stop [container id / name] # Stop the container docker rm [container id / name] # Remove a container docker images # List images in the host docker rmi [image] # Remove the image from the host docker pull [image] # Get the image from Docker Hub docker exec [container] [command] # Execute a command in the Docker container docker run -it centos bash # Run the bash inside Centos docker run --name [your_name] -d [image] # Run a container with a name; -d is detach docker run --name webapp -d nginx:1.14-alpine # Example: Run a named container with a specific version of Nginx in detached mode docker run [image]:[version] # Specify a version; default is the latest version # You can check the tags for version at Docker Hub docker run -p [port]:[port container] [image] # Example: docker run -p 8306:3306 mysql # Needs port mapping docker logs [container id / name] # Check logs docker inspect [container id] # Inspect container; internal IP address Building the App Manually #We will build the app step-by-step by following the flow from the architecture diagram.\nBuild the voting-app\nNavigate to the vote directory and build the voting-app: docker build . -t voting-app Check if the image is locally available: docker images docker run -p 5000:80 voting-app Check in your browser at http://localhost:5000 - you should see the webpage with options to vote for cat or dog. Set up Redis\ndocker run -d --name redis redis If Redis is not available locally, it will automatically download from Docker Hub. Check if it is running with: docker ps Build and run the worker app\nNavigate to the worker directory and build the worker app: docker build . -t worker-app Run the worker app, linking it to the Redis container: docker run -d --name worker-app --link redis:redis worker-apps Set up PostgreSQL\ndocker run -d --name db -e POSTGRES_PASSWORD=postgres db Check if it is running with docker ps Build and run the result app\nNavigate to the result directory and build the result app: docker build . -t result-app Run the result app, linking it to the PostgreSQL container: docker run -d --name result-app -p 5001:80 --link db:db result-app Check in your browser at http://localhost:5001 to see the voting results in real-time. Ensure all services are running\ndocker ps You should see containers for voting-app, redis, worker-app, db, and result-app all running.\nBuiding the App Automatically with Docker #Docker Compose allows you to define and manage multi-container Docker applications using a single docker-compose.yml file.\nCreate a docker-compose.yml file with the following content:\nservices: redis: image: redis db: image: postgres:15 environment: POSTGRES_PASSWORD: postgres vote: image: voting-app ports: - 5000:80 links: - redis worker: image: worker-app links: - redis - db result: image: result-app ports: - 5001:80 links: - db services defines the different services that make up your application image specifies the Docker image to use environment sets environment variables. In this example, the PostgreSQL password. links link a service to another service ports maps port of the host to a port in the container Run the application with Docker Compose:\ndocker-compose up Verify all services are running\ndocker-compose ps Notes #The voting application only accepts one vote per client browser. It does not register additional votes if a vote has already been submitted from a client.\nThis isn\u0026rsquo;t an example of a properly architected perfectly designed distributed app\u0026hellip; it\u0026rsquo;s just a simple example of the various types of pieces and languages you might see (queues, persistent data, etc), and how to deal with them in Docker at a basic level.\nGitHub Repository\n","date":"24 May 2024","permalink":"/projects/voting-app/","section":"Projects","summary":"This repository is a clone of dockersamples/example-voting-app, created for learning and experimenting with Docker containers.","title":"Docker Example Voting App"},{"content":"üëã Hi there! I am Joshua Dagoy, a passionate self-taught programmer driven by continuous learning and creative problem-solving.\nüî¨üåä Formerly a marine biologist, I am currently immersing myself in the world of computer science as a student at Campus19üíª, a unique coding school that emphasizes peer-to-peer and project-based learning. This journey has cultivated a mindset centered around self-directed learning.\n\u0026lt;/\u0026gt; Alongside my studies, I am enrolled in online courses, with Harvard\u0026rsquo;s CS50x holding the top spot as my favorite. Currently, I am working to finish my final project üöÄ.\nI launched this website with üá∑, as R sparked my coding passion during graduate studies. Excitingly, I\u0026rsquo;ve committed to being a consistent contributor to the üá∑ weekly #TidyTuesday DataViz challenge throughout 2024, after a hiatus last year.\nJoin me on this coding adventure and witness my transition to tech! üåêüí° #PassionateProgrammer #MarineBiologistInTech\n","date":null,"permalink":"/","section":"Welcome to the Personal Website of Joshua Dagoy","summary":"üëã Hi there!","title":"Welcome to the Personal Website of Joshua Dagoy"},{"content":"View the full assignment description on CS50\u0026rsquo;s OpenCourseWare.\nGitHub Repository\nTechnologies # Python Flask HTML Bootstrap SQL Summary #Finance is a web application that allows logged-in users to \u0026ldquo;buy\u0026rdquo; and \u0026ldquo;sell\u0026rdquo; stocks using pretend money. Users can look up real stock quotes fetched from the IEX API and view their stock portfolio transaction history.\nHow to Run #I ran the code in the CS50 Codespace because it requires the cs50 package, which provides essential functionalities for the application. Additionally, CS50 offers its own web server, simplifying the setup process. However, it is possible to run the application locally by substituting CS50-specific functions with equivalents from other packages.\nSpecification # register #Allows users to register for an account via a form.\nInput fields: username (text) and password (text). Handles duplicate usernames with try-except blocks. Hashes passwords using generate_password_hash On success, inserts the new user into the users table and redirects to login. quote #Allows users to look up a stock‚Äôs current price.\nInput field: symbol (text). On GET request, renders a form for input. On POST request, renders the stock price using lookup. buy #Allows users to buy stocks.\nInput fields: symbol (text) and shares (text). Validates stock symbol and share count. Checks user‚Äôs cash balance and updates the database with the purchase details. Redirects to the home page on success. index #Displays the logged-in user\u0026rsquo;s stocks, including the number of shares, current prices, and total values. Also shows the user\u0026rsquo;s cash balance and total portfolio value. sell #Allows users to sell shares of owned stocks.\nInput fields: symbol (select menu) and shares (text). Validates stock ownership and share count. Updates the database with the sale details. Redirects to the home page on success. history #Displays a table summarizing all user transactions, including buys and sells, with details such as stock symbol, price, number of shares, and transaction date/time.\n","date":"20 May 2024","permalink":"/projects/finance/","section":"Projects","summary":"View the full assignment description on CS50\u0026rsquo;s OpenCourseWare.","title":"Finance, A Stock Portfolio"},{"content":"","date":"1 January 0001","permalink":"/blog/","section":"Welcome to the Personal Website of Joshua Dagoy","summary":"","title":"Blog"},{"content":"","date":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"TidyTuesday is a weekly data project aimed at the R community, where participants work with real-world datasets. Below are my contributions to TidyTuesday challenges over the years.\nClick the image to enlarge.\n2024 #Week 22 - Lisa\u0026rsquo;s Vegetable Garden {gardenR} # 2022 #Week 24 - US Drought # Week 25 - Slave Trade # Week 26 - UK Gender Pay Gap # Week 32 - Ferris Wheels {ferriswheels} # Week 33 - Psychometrics # Week 34 - Chips # Week 35 - Pell Grants # ","date":"1 January 0001","permalink":"/dataviz/","section":"Welcome to the Personal Website of Joshua Dagoy","summary":"TidyTuesday is a weekly data project aimed at the R community, where participants work with real-world datasets.","title":"My Entries for TidyTuesday"},{"content":"Below are some of my coding projects.\ncub3d #minishell #fdf # voting app, an app using multiple Docker containers # finance, a stock portfolio website #","date":"1 January 0001","permalink":"/projects/","section":"Welcome to the Personal Website of Joshua Dagoy","summary":"Below are some of my coding projects.","title":"Projects"},{"content":"Rabaoui, L., Yacoubi, L., Lin, Y.J., Joydas, T.V., Maneja, R.H., Dagoy, J., Qurban, M.A. \u0026amp; Roa-Ureta, R. H. (2021). Distribution, abundance, and life history traits of the blue swimming crab Portunus segnis (Forsk√•l, 1775) in the Saudi waters of the Arabian Gulf. Regional Studies in Marine Science, 101895. doi.org/10.1016/j.rsma.2021.101895\nManeja, R.H., Miller, J.D., Li, W., El-Askary, H., Flandez, A.V.B., Dagoy, J., Alcaria J.F., Basali A., Al-Abdulkader K., Louland R., Kattan Y. \u0026amp; Qurban, M. A. (2020). Long-term NDVI and recent vegetation cover profiles of major offshore island nesting sites of sea turtles in Saudi waters of the northern Arabian Gulf. Ecological Indicators, 117, 106612. doi.org/10.1016/j.ecolind.2020.106612\nRabaoui, L., Lin, Y.J., Roa-Ureta, R.H., Dagoy, J., Joydas, T.V., Borja, A., Muxika I., Franco J., Al-Abdulkader K., Loughland R., Alnazry H. \u0026amp; Qurban, M.A. (2019). Recovery of benthic communities from small-scale shrimp trawling: Evidence from using ecological indices over a short temporal scale. Ecological indicators, 99, 299-309. doi.org/10.1016/j.ecolind.2018.12.042\n","date":"1 January 0001","permalink":"/research/","section":"Welcome to the Personal Website of Joshua Dagoy","summary":"Rabaoui, L.","title":"Research"},{"content":"","date":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"}]